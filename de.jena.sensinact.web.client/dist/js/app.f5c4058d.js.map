{"version":3,"file":"js/app.f5c4058d.js","mappings":"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","sources":["webpack://sensor_thing_api_map/./src/App.vue","webpack://sensor_thing_api_map/./src/App.vue?01fe","webpack://sensor_thing_api_map/./src/views/Map.vue","webpack://sensor_thing_api_map/./openapi/client/base.ts","webpack://sensor_thing_api_map/./openapi/client/common.ts","webpack://sensor_thing_api_map/./openapi/client/api.ts","webpack://sensor_thing_api_map/./openapi/client/configuration.ts","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue","webpack://sensor_thing_api_map/./src/components/Location.vue","webpack://sensor_thing_api_map/./src/components/Thing.vue","webpack://sensor_thing_api_map/./src/components/Thing.vue?63f8","webpack://sensor_thing_api_map/./src/components/Thing.vue?a496","webpack://sensor_thing_api_map/./src/components/Thing.vue?f496","webpack://sensor_thing_api_map/./src/components/Location.vue?54bd","webpack://sensor_thing_api_map/./src/components/Location.vue?f977","webpack://sensor_thing_api_map/./src/components/Location.vue?6289","webpack://sensor_thing_api_map/./src/components/Datastreams.vue","webpack://sensor_thing_api_map/./src/components/Observations.vue","webpack://sensor_thing_api_map/./src/config/base.ts","webpack://sensor_thing_api_map/./src/components/Observations.vue?3371","webpack://sensor_thing_api_map/./src/components/Observations.vue?af02","webpack://sensor_thing_api_map/./src/components/Observations.vue?83e6","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?1cbb","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?0ed8","webpack://sensor_thing_api_map/./src/components/Datastreams.vue?b69d","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?d6fd","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?949f","webpack://sensor_thing_api_map/./src/components/PropertiesView/Properties.vue?d648","webpack://sensor_thing_api_map/./src/views/Map.vue?90fe","webpack://sensor_thing_api_map/./src/views/Map.vue?a6ce","webpack://sensor_thing_api_map/./src/views/Map.vue?5ea3","webpack://sensor_thing_api_map/./src/components/Tree.vue","webpack://sensor_thing_api_map/./src/components/Tree.vue?357b","webpack://sensor_thing_api_map/./src/components/Tree.vue?0930","webpack://sensor_thing_api_map/./src/components/Tree.vue?1c47","webpack://sensor_thing_api_map/./src/views/Datastreams.vue","webpack://sensor_thing_api_map/./src/components/StreamTree.vue","webpack://sensor_thing_api_map/./src/helper/DatastreamGroups.ts","webpack://sensor_thing_api_map/./src/components/StreamTree.vue?c76a","webpack://sensor_thing_api_map/./src/components/StreamTree.vue?2dc2","webpack://sensor_thing_api_map/./src/components/StreamTree.vue?5226","webpack://sensor_thing_api_map/./src/components/Datapoint.vue","webpack://sensor_thing_api_map/./src/components/Datapoint.vue?0843","webpack://sensor_thing_api_map/./src/components/Datapoint.vue?76fd","webpack://sensor_thing_api_map/./src/components/Datapoint.vue?a319","webpack://sensor_thing_api_map/./src/views/Datastreams.vue?1f5b","webpack://sensor_thing_api_map/./src/views/Datastreams.vue?6a98","webpack://sensor_thing_api_map/./src/views/Datastreams.vue?07d0","webpack://sensor_thing_api_map/./src/router/index.ts","webpack://sensor_thing_api_map/./src/i18n.ts","webpack://sensor_thing_api_map/./src/store/ObsStore.ts","webpack://sensor_thing_api_map/./src/store/SimpleStore.ts","webpack://sensor_thing_api_map/./src/main.ts","webpack://sensor_thing_api_map/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://sensor_thing_api_map/webpack/bootstrap","webpack://sensor_thing_api_map/webpack/runtime/chunk loaded","webpack://sensor_thing_api_map/webpack/runtime/compat get default export","webpack://sensor_thing_api_map/webpack/runtime/define property getters","webpack://sensor_thing_api_map/webpack/runtime/global","webpack://sensor_thing_api_map/webpack/runtime/hasOwnProperty shorthand","webpack://sensor_thing_api_map/webpack/runtime/node module decorator","webpack://sensor_thing_api_map/webpack/runtime/jsonp chunk loading","webpack://sensor_thing_api_map/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"app\"}},[_c('router-view')],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=678a0134&\"\nvar script = {}\nimport style0 from \"./App.vue?vue&type=style&index=0&id=678a0134&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"grid\"},[_c('div',{staticClass:\"url rim colspan2\"},[_c('b-field',[_c('b-input',{model:{value:(_vm.baseurl),callback:function ($$v) {_vm.baseurl=$$v},expression:\"baseurl\"}}),_c('b-button',{attrs:{\"type\":\"is-primary\",\"outlined\":\"\"},on:{\"click\":function($event){return _vm.connect()}}},[_vm._v(\"Connect\")])],1)],1),_c('div',{staticClass:\"map_holder rim\"},[_c('l-map',{attrs:{\"id\":\"map\",\"zoom\":_vm.zoom,\"center\":_vm.center}},[_c('l-tile-layer',{attrs:{\"url\":_vm.url,\"attribution\":_vm.attribution}}),_vm._l((_vm.points),function(point){return _c('l-marker',{key:point['@iot.id'],attrs:{\"lat-lng\":_vm.res(point.location.coordinates)},on:{\"click\":function($event){return _vm.markerWasClicked(point)}}},[_c('l-icon',{attrs:{\"class-name\":\"custom-div-icon\"}},[_c('div',{staticClass:\"marker-pin\",class:{'selected':point['@iot.id']==_vm.selected}},[_c('i',{staticClass:\"mdi mdi-radio-tower\"})])])],1)})],2)],1),_c('div',{staticClass:\"sidebar_holder rim\"},[_c('router-view',{attrs:{\"id\":\"sidebar\"},on:{\"TreeSelect\":(data)=>_vm.treeData=data}})],1),_c('div',{staticClass:\"propertie_holder rim\"},[_c('PropertiesC',{attrs:{\"data\":_vm.treeData}})],1),_c('div',{staticClass:\"corner\"})])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n\nexport const BASE_PATH = \"https://sensors.bgs.ac.uk/FROST-Server\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    constructor(public field: string, msg?: string) {\n        super(msg);\n        this.name = \"RequiredError\"\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from \"./configuration\";\nimport type { RequestArgs } from \"./base\";\nimport type { AxiosInstance, AxiosResponse } from 'axios';\nimport { RequiredError } from \"./base\";\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\nfunction setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = \"\"): void {\n    if (parameter == null) return;\n    if (typeof parameter === \"object\") {\n        if (Array.isArray(parameter)) {\n            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));\n        } \n        else {\n            Object.keys(parameter).forEach(currentKey => \n                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)\n            );\n        }\n    } \n    else {\n        if (urlSearchParams.has(key)) {\n            urlSearchParams.append(key, parameter);\n        } \n        else {\n            urlSearchParams.set(key, parameter);\n        }\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    setFlattenedQueryParams(searchParams, objects);\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport type { Configuration } from './configuration';\nimport type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport type { RequestArgs } from './base';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Datastream\n */\nexport interface Datastream {\n    /**\n     * The Id of the datastream\n     * @type {number}\n     * @memberof Datastream\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Datastream\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'description'?: string;\n    /**\n     * The label or name of the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'name'?: string;\n    /**\n     * The observation type for the datastream, as defined by the OGC Observations and Measurements standard\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observationType'?: string;\n    /**\n     * The bounding box of the spatial extent of all features of interest associated with observations belonging to the Datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'observedArea'?: string;\n    /**\n     * The range of phenomenon times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'phenomenonTime'?: string;\n    /**\n     * \n     * @type {DatastreamProperties}\n     * @memberof Datastream\n     */\n    'properties'?: DatastreamProperties;\n    /**\n     * The range of result times from all observations belonging to the datastream\n     * @type {string}\n     * @memberof Datastream\n     */\n    'resultTime'?: string;\n    /**\n     * \n     * @type {DatastreamUnitOfMeasurement}\n     * @memberof Datastream\n     */\n    'unitOfMeasurement'?: DatastreamUnitOfMeasurement;\n}\n/**\n * \n * @export\n * @interface DatastreamProperties\n */\nexport interface DatastreamProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the datastream (Measured or Calculated), derived from the observed property\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this datastream\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this datastream can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof DatastreamProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface DatastreamUnitOfMeasurement\n */\nexport interface DatastreamUnitOfMeasurement {\n    /**\n     * The full name of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'name'?: string;\n    /**\n     * The symbol of the unit of measurement\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'symbol'?: string;\n    /**\n     * A URI for the unit of measurement providing a representation of its definition, ideally following the Unified Code for Unit of Measure (UCUM)\n     * @type {string}\n     * @memberof DatastreamUnitOfMeasurement\n     */\n    'defintion'?: string;\n}\n/**\n * \n * @export\n * @interface Datastreams\n */\nexport interface Datastreams {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Datastreams\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Datastreams\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Datastream>}\n     * @memberof Datastreams\n     */\n    'value'?: Array<Datastream>;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterest\n */\nexport interface FeatureOfInterest {\n    /**\n     * The Id of the feature of interest\n     * @type {number}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'feature\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'encodingType'?: string;\n    /**\n     * The detailed description of the feature of interest, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'feature'?: string;\n    /**\n     * The label or name of the feature of interest\n     * @type {string}\n     * @memberof FeatureOfInterest\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {FeatureOfInterestProperties}\n     * @memberof FeatureOfInterest\n     */\n    'properties'?: FeatureOfInterestProperties;\n}\n/**\n * \n * @export\n * @interface FeatureOfInterestProperties\n */\nexport interface FeatureOfInterestProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the feature of interest type, set to \\'SEN_LOC\\' (Sensor Location) or \\'BOREHOLE\\'\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'type'?: string;\n    /**\n     * The elevation (Z) of the sensor location (type \\'SEN_LOC\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the sensor location is effective (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the sensor location is no longer effective, where it is not set the location is still active (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'to_date'?: string;\n    /**\n     * A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type \\'SEN_LOC\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'sobi_bgs_id'?: number;\n    /**\n     * The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'borehole_id'?: number;\n    /**\n     * The drilled length of the borehole in metres (type \\'BOREHOLE\\' only)\n     * @type {number}\n     * @memberof FeatureOfInterestProperties\n     */\n    'drilled_length'?: number;\n    /**\n     * An alternative name by which the borehole is known (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference'?: string;\n    /**\n     * Indicates the source of the \\'reference\\' property (type \\'BOREHOLE\\' only)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'reference_type'?: string;\n    /**\n     * A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof FeatureOfInterestProperties\n     */\n    'publish_yn'?: string;\n}\n/**\n * \n * @export\n * @interface FeaturesOfInterest\n */\nexport interface FeaturesOfInterest {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof FeaturesOfInterest\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<FeatureOfInterest>}\n     * @memberof FeaturesOfInterest\n     */\n    'value'?: Array<FeatureOfInterest>;\n}\n/**\n * \n * @export\n * @interface Location\n */\nexport interface Location {\n    /**\n     * The Id of the location\n     * @type {number}\n     * @memberof Location\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Location\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'location\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'encodingType'?: string;\n    /**\n     * The location, recorded in line with the type defined by the \\'encodingType\\' property\n     * @type {string}\n     * @memberof Location\n     */\n    'location'?: string;\n    /**\n     * The label or name of the location\n     * @type {string}\n     * @memberof Location\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {LocationProperties}\n     * @memberof Location\n     */\n    'properties'?: LocationProperties;\n}\n/**\n * \n * @export\n * @interface LocationProperties\n */\nexport interface LocationProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The name of the site to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'site'?: string;\n    /**\n     * The name of the observatory to which the location belongs\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'observatory'?: string;\n    /**\n     * The elevation (Z) of the location\n     * @type {number}\n     * @memberof LocationProperties\n     */\n    'z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the Z value\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'z_crs'?: string;\n    /**\n     * The time from which the location is effective\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'from_date'?: string;\n    /**\n     * The time from which the location is no longer effective, where it is not set the location is still active\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'to_date'?: string;\n    /**\n     * Any additional information about the location where available\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'comments'?: string;\n    /**\n     * A flag to indicate whether the location is the active location for a thing (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'active_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this location can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof LocationProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Locations\n */\nexport interface Locations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Locations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Locations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Location>}\n     * @memberof Locations\n     */\n    'value'?: Array<Location>;\n}\n/**\n * \n * @export\n * @interface Observation\n */\nexport interface Observation {\n    /**\n     * The Id of the observation\n     * @type {number}\n     * @memberof Observation\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Observation\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * \n     * @type {ObservationParameters}\n     * @memberof Observation\n     */\n    'parameters'?: ObservationParameters;\n    /**\n     * The time when the observation happened\n     * @type {string}\n     * @memberof Observation\n     */\n    'phenomenonTime'?: string;\n    /**\n     * The estimated value of the observed property\n     * @type {string}\n     * @memberof Observation\n     */\n    'result'?: string;\n    /**\n     * A description of the quality of the result\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultQuality'?: string;\n    /**\n     * The time the result was generated\n     * @type {string}\n     * @memberof Observation\n     */\n    'resultTime'?: string;\n    /**\n     * The time period during which the result can be used\n     * @type {string}\n     * @memberof Observation\n     */\n    'validTime'?: string;\n}\n/**\n * \n * @export\n * @interface ObservationParameters\n */\nexport interface ObservationParameters {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observation (SEN_SENSOR_DATA.sensor_data_id)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether details of this observation can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservationParameters\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Observations\n */\nexport interface Observations {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Observations\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Observations\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Observation>}\n     * @memberof Observations\n     */\n    'value'?: Array<Observation>;\n}\n/**\n * \n * @export\n * @interface ObservedProperties\n */\nexport interface ObservedProperties {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof ObservedProperties\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof ObservedProperties\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<ObservedProperty>}\n     * @memberof ObservedProperties\n     */\n    'value'?: Array<ObservedProperty>;\n}\n/**\n * \n * @export\n * @interface ObservedProperty\n */\nexport interface ObservedProperty {\n    /**\n     * The Id of the observed property\n     * @type {number}\n     * @memberof ObservedProperty\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'definition'?: string;\n    /**\n     * A description of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'description'?: string;\n    /**\n     * The label or name of the observed property\n     * @type {string}\n     * @memberof ObservedProperty\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ObservedPropertyProperties}\n     * @memberof ObservedProperty\n     */\n    'properties'?: ObservedPropertyProperties;\n}\n/**\n * \n * @export\n * @interface ObservedPropertyProperties\n */\nexport interface ObservedPropertyProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the observed property (DIC_SEN_PROPERTY_TYPE.code)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'sen_id'?: string;\n    /**\n     * The type of data provided by the observed property (Measured or Calculated)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'data_type'?: string;\n    /**\n     * A description of the formula used to derive values for the observed property (data type \\'Calculated\\' only)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'formula'?: string;\n    /**\n     * A flag to indicate whether details of this observed property can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ObservedPropertyProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensor\n */\nexport interface Sensor {\n    /**\n     * The Id of the sensor type\n     * @type {number}\n     * @memberof Sensor\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Sensor\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'description'?: string;\n    /**\n     * The encoding type of the \\'metadata\\' property\n     * @type {string}\n     * @memberof Sensor\n     */\n    'encodingType'?: string;\n    /**\n     * A detailed description of the sensor type (style based on \\'encodingType\\' property)\n     * @type {string}\n     * @memberof Sensor\n     */\n    'metadata'?: string;\n    /**\n     * The label or name of the sensor type\n     * @type {string}\n     * @memberof Sensor\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {SensorProperties}\n     * @memberof Sensor\n     */\n    'properties'?: SensorProperties;\n}\n/**\n * \n * @export\n * @interface SensorProperties\n */\nexport interface SensorProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'sen_id'?: string;\n    /**\n     * A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'complex_data_yn&quot;'?: string;\n    /**\n     * A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof SensorProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Sensors\n */\nexport interface Sensors {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Sensors\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Sensors\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Sensor>}\n     * @memberof Sensors\n     */\n    'value'?: Array<Sensor>;\n}\n/**\n * \n * @export\n * @interface Thing\n */\nexport interface Thing {\n    /**\n     * The Id of the thing\n     * @type {number}\n     * @memberof Thing\n     */\n    '@iot.id'?: number;\n    /**\n     * The direct link to the entity\n     * @type {string}\n     * @memberof Thing\n     */\n    '@iot.selfLink'?: string;\n    /**\n     * A description of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'description'?: string;\n    /**\n     * The label or name of the thing\n     * @type {string}\n     * @memberof Thing\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {ThingProperties}\n     * @memberof Thing\n     */\n    'properties'?: ThingProperties;\n}\n/**\n * \n * @export\n * @interface ThingProperties\n */\nexport interface ThingProperties {\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'sen_id'?: string;\n    /**\n     * Indicates the type of thing, set to \\'SENSOR\\'\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'type'?: string;\n    /**\n     * The serial number of the physical sensor currently installed if known\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'serial_no'?: string;\n    /**\n     * Indicates how data from the thing is captured (Telemetered, Manual)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_capture'?: string;\n    /**\n     * The earliest observation date for which data from the thing will be available in the API\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'observation_start_date'?: string;\n    /**\n     * The elevation (Z) of the thing\\'s datum\n     * @type {number}\n     * @memberof ThingProperties\n     */\n    'datum_z'?: number;\n    /**\n     * The vertical co-ordinate reference system of the \\'datum_z\\' value\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_z_crs'?: string;\n    /**\n     * The label or name for the thing\\'s datum\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'datum_name'?: string;\n    /**\n     * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'borehole_reference'?: string;\n    /**\n     * A description of any access restrictions that apply to metadata and observations associated with this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'access_restriction'?: string;\n    /**\n     * A description of any restrictions that apply to the use of metadata and observations from this thing\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'data_usage'?: string;\n    /**\n     * A flag to indicate whether details of this thing can be publicly released (set to Y or N)\n     * @type {string}\n     * @memberof ThingProperties\n     */\n    'publish_yn&quot;'?: string;\n}\n/**\n * \n * @export\n * @interface Things\n */\nexport interface Things {\n    /**\n     * The total number of entities in the entityset\n     * @type {number}\n     * @memberof Things\n     */\n    '@iot.count'?: number;\n    /**\n     * The link to the next page of entities\n     * @type {string}\n     * @memberof Things\n     */\n    '@iot.nextLink'?: string;\n    /**\n     * \n     * @type {Array<Thing>}\n     * @memberof Things\n     */\n    'value'?: Array<Thing>;\n}\n\n/**\n * DatastreamsApi - axios parameter creator\n * @export\n */\nexport const DatastreamsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11DatastreamsEntityIdThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Datastreams({entityId})/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Datastreams`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DatastreamsApi - functional programming interface\n * @export\n */\nexport const DatastreamsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DatastreamsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DatastreamsApi - factory interface\n * @export\n */\nexport const DatastreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DatastreamsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream identified by **entityId**\n         * @summary Get information about an individual datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams that provide a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams which share a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams provided by a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing for the datastream identified by **entityId**\n         * @summary Get information about a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n         * @summary Get all locations for a datastream\\'s thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the datastreams provided by this api (subject to any parameters set)\n         * @summary Get all datastreams\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DatastreamsApi - interface\n * @export\n * @interface DatastreamsApi\n */\nexport interface DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApiInterface\n     */\n    v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n}\n\n/**\n * DatastreamsApi - object-oriented interface\n * @export\n * @class DatastreamsApi\n * @extends {BaseAPI}\n */\nexport class DatastreamsApi extends BaseAPI implements DatastreamsApiInterface {\n    /**\n     * Returns information about the datastream identified by **entityId**\n     * @summary Get information about an individual datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams that provide a datastream\\'s observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams which share a datastream\\'s sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams provided by a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing for the datastream identified by **entityId**\n     * @summary Get information about a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)\n     * @summary Get all locations for a datastream\\'s thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsEntityIdThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsEntityIdThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the datastreams provided by this api (subject to any parameters set)\n     * @summary Get all datastreams\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DatastreamsApi\n     */\n    public v11DatastreamsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return DatastreamsApiFp(this.configuration).v11DatastreamsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * FeaturesOfInterestApi - axios parameter creator\n * @export\n */\nexport const FeaturesOfInterestApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11FeaturesOfInterestEntityIdObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/FeaturesOfInterest({entityId})/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/FeaturesOfInterest`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - functional programming interface\n * @export\n */\nexport const FeaturesOfInterestApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = FeaturesOfInterestApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturesOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * FeaturesOfInterestApi - factory interface\n * @export\n */\nexport const FeaturesOfInterestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = FeaturesOfInterestApiFp(configuration)\n    return {\n        /**\n         * Returns information about the feature of interest identified by **entityId**\n         * @summary Get information about an individual feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for a feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the features of interest provided by this api (subject to any parameters set)\n         * @summary Get all features of interest\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<FeaturesOfInterest> {\n            return localVarFp.v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * FeaturesOfInterestApi - interface\n * @export\n * @interface FeaturesOfInterestApi\n */\nexport interface FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApiInterface\n     */\n    v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<FeaturesOfInterest>;\n\n}\n\n/**\n * FeaturesOfInterestApi - object-oriented interface\n * @export\n * @class FeaturesOfInterestApi\n * @extends {BaseAPI}\n */\nexport class FeaturesOfInterestApi extends BaseAPI implements FeaturesOfInterestApiInterface {\n    /**\n     * Returns information about the feature of interest identified by **entityId**\n     * @summary Get information about an individual feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for a feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestEntityIdObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestEntityIdObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the features of interest provided by this api (subject to any parameters set)\n     * @summary Get all features of interest\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof FeaturesOfInterestApi\n     */\n    public v11FeaturesOfInterestGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return FeaturesOfInterestApiFp(this.configuration).v11FeaturesOfInterestGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LocationsApi - axios parameter creator\n * @export\n */\nexport const LocationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11LocationsEntityIdThingsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Locations({entityId})/Things`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Locations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LocationsApi - functional programming interface\n * @export\n */\nexport const LocationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LocationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Location>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LocationsApi - factory interface\n * @export\n */\nexport const LocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LocationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the location identified by **entityId**\n         * @summary Get information about an individual location\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Location> {\n            return localVarFp.v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing at the location identified by **entityId**\n         * @summary Get information about the thing at the location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the locations provided by this api (subject to any parameters set)\n         * @summary Get all locations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LocationsApi - interface\n * @export\n * @interface LocationsApi\n */\nexport interface LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Location>;\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApiInterface\n     */\n    v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n}\n\n/**\n * LocationsApi - object-oriented interface\n * @export\n * @class LocationsApi\n * @extends {BaseAPI}\n */\nexport class LocationsApi extends BaseAPI implements LocationsApiInterface {\n    /**\n     * Returns information about the location identified by **entityId**\n     * @summary Get information about an individual location\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing at the location identified by **entityId**\n     * @summary Get information about the thing at the location\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsEntityIdThingsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsEntityIdThingsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the locations provided by this api (subject to any parameters set)\n     * @summary Get all locations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LocationsApi\n     */\n    public v11LocationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return LocationsApiFp(this.configuration).v11LocationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservationsApi - axios parameter creator\n * @export\n */\nexport const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamObservedPropertyGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/ObservedProperty`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamSensorGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Sensor`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdDatastreamThingLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/Datastream/Thing/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdFeatureOfInterestObservationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})/FeatureOfInterest/Observations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservationsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Observations({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Observations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservationsApi - functional programming interface\n * @export\n */\nexport const ObservationsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastream>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureOfInterest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservationsApi - factory interface\n * @export\n */\nexport const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservationsApiFp(configuration)\n    return {\n        /**\n         * Returns information about the datastream for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Datastream> {\n            return localVarFp.v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n         * @summary Get all observations for an observations\\'s datastream\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the feature of interest for the observation identified by **entityId**\n         * @summary Get information about an observation\\'s feature of interest\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<FeatureOfInterest> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observation identified by **entityId**\n         * @summary Get information about an individual observation\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Observation> {\n            return localVarFp.v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observations provided by this api (subject to any parameters set)\n         * @summary Get all observations\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Observations> {\n            return localVarFp.v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservationsApi - interface\n * @export\n * @interface ObservationsApi\n */\nexport interface ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Datastream>;\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<FeatureOfInterest>;\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Observation>;\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApiInterface\n     */\n    v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Observations>;\n\n}\n\n/**\n * ObservationsApi - object-oriented interface\n * @export\n * @class ObservationsApi\n * @extends {BaseAPI}\n */\nexport class ObservationsApi extends BaseAPI implements ObservationsApiInterface {\n    /**\n     * Returns information about the datastream for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)\n     * @summary Get all observations for an observations\\'s datastream\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamObservedPropertyGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamSensorGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamSensorGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdDatastreamThingLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdDatastreamThingLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the feature of interest for the observation identified by **entityId**\n     * @summary Get information about an observation\\'s feature of interest\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdFeatureOfInterestObservationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observation identified by **entityId**\n     * @summary Get information about an individual observation\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observations provided by this api (subject to any parameters set)\n     * @summary Get all observations\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservationsApi\n     */\n    public v11ObservationsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservationsApiFp(this.configuration).v11ObservationsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ObservedPropertiesApi - axios parameter creator\n * @export\n */\nexport const ObservedPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ObservedPropertiesEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/ObservedProperties({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/ObservedProperties`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - functional programming interface\n * @export\n */\nexport const ObservedPropertiesApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ObservedPropertiesApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperty>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObservedProperties>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ObservedPropertiesApi - factory interface\n * @export\n */\nexport const ObservedPropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ObservedPropertiesApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for an observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the observed property identified by **entityId**\n         * @summary Get information about an individual observed property\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<ObservedProperty> {\n            return localVarFp.v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the observed properties provided by this api (subject to any parameters set)\n         * @summary Get all observed properties\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<ObservedProperties> {\n            return localVarFp.v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ObservedPropertiesApi - interface\n * @export\n * @interface ObservedPropertiesApi\n */\nexport interface ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperty>;\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApiInterface\n     */\n    v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<ObservedProperties>;\n\n}\n\n/**\n * ObservedPropertiesApi - object-oriented interface\n * @export\n * @class ObservedPropertiesApi\n * @extends {BaseAPI}\n */\nexport class ObservedPropertiesApi extends BaseAPI implements ObservedPropertiesApiInterface {\n    /**\n     * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for an observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the observed property identified by **entityId**\n     * @summary Get information about an individual observed property\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the observed properties provided by this api (subject to any parameters set)\n     * @summary Get all observed properties\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ObservedPropertiesApi\n     */\n    public v11ObservedPropertiesGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ObservedPropertiesApiFp(this.configuration).v11ObservedPropertiesGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * SensorsApi - axios parameter creator\n * @export\n */\nexport const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11SensorsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Sensors({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Sensors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * SensorsApi - functional programming interface\n * @export\n */\nexport const SensorsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensor>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sensors>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * SensorsApi - factory interface\n * @export\n */\nexport const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = SensorsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the sensor type identified by **entityId**\n         * @summary Get information about an individual sensor type\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Sensor> {\n            return localVarFp.v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the sensor types provided by this api (subject to any parameters set)\n         * @summary Get all sensor types\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Sensors> {\n            return localVarFp.v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * SensorsApi - interface\n * @export\n * @interface SensorsApi\n */\nexport interface SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Sensor>;\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApiInterface\n     */\n    v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Sensors>;\n\n}\n\n/**\n * SensorsApi - object-oriented interface\n * @export\n * @class SensorsApi\n * @extends {BaseAPI}\n */\nexport class SensorsApi extends BaseAPI implements SensorsApiInterface {\n    /**\n     * Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the sensor type identified by **entityId**\n     * @summary Get information about an individual sensor type\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the sensor types provided by this api (subject to any parameters set)\n     * @summary Get all sensor types\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SensorsApi\n     */\n    public v11SensorsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return SensorsApiFp(this.configuration).v11SensorsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * ThingsApi - axios parameter creator\n * @export\n */\nexport const ThingsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdDatastreamsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Datastreams`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet: async (entityId: number, $select?: string, $expand?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet: async (entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'entityId' is not null or undefined\n            assertParamExists('v11ThingsEntityIdLocationsGet', 'entityId', entityId)\n            const localVarPath = `/v1.1/Things({entityId})/Locations`\n                .replace(`{${\"entityId\"}}`, encodeURIComponent(String(entityId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet: async ($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v1.1/Things`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if ($skip !== undefined) {\n                localVarQueryParameter['$skip'] = $skip;\n            }\n\n            if ($top !== undefined) {\n                localVarQueryParameter['$top'] = $top;\n            }\n\n            if ($count !== undefined) {\n                localVarQueryParameter['$count'] = $count;\n            }\n\n            if ($select !== undefined) {\n                localVarQueryParameter['$select'] = $select;\n            }\n\n            if ($expand !== undefined) {\n                localVarQueryParameter['$expand'] = $expand;\n            }\n\n            if ($filter !== undefined) {\n                localVarQueryParameter['$filter'] = $filter;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * ThingsApi - functional programming interface\n * @export\n */\nexport const ThingsApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = ThingsApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastreams>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Thing>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdGet(entityId, $select, $expand, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locations>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Things>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * ThingsApi - factory interface\n * @export\n */\nexport const ThingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = ThingsApiFp(configuration)\n    return {\n        /**\n         * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n         * @summary Get all datastreams for a thing\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Datastreams> {\n            return localVarFp.v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the thing identified by **entityId**\n         * @summary Get information about an individual thing\n         * @param {number} entityId The id of the requested entity\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: any): AxiosPromise<Thing> {\n            return localVarFp.v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns information about the location for the thing identified by **entityId**\n         * @summary Get information about a things\\'s location\n         * @param {number} entityId The id of the requested entity\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Locations> {\n            return localVarFp.v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns all the things provided by this api (subject to any parameters set)\n         * @summary Get all things\n         * @param {number} [$skip] The number of elements to skip from the collection\n         * @param {number} [$top] The number of elements to return\n         * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n         * @param {string} [$select] The list of properties that need to be returned\n         * @param {string} [$expand] The list of related queries that need to be included in the result\n         * @param {string} [$filter] A filter query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: any): AxiosPromise<Things> {\n            return localVarFp.v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * ThingsApi - interface\n * @export\n * @interface ThingsApi\n */\nexport interface ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Datastreams>;\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig): AxiosPromise<Thing>;\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Locations>;\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApiInterface\n     */\n    v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig): AxiosPromise<Things>;\n\n}\n\n/**\n * ThingsApi - object-oriented interface\n * @export\n * @class ThingsApi\n * @extends {BaseAPI}\n */\nexport class ThingsApi extends BaseAPI implements ThingsApiInterface {\n    /**\n     * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)\n     * @summary Get all datastreams for a thing\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdDatastreamsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdDatastreamsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the thing identified by **entityId**\n     * @summary Get information about an individual thing\n     * @param {number} entityId The id of the requested entity\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdGet(entityId: number, $select?: string, $expand?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdGet(entityId, $select, $expand, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns information about the location for the thing identified by **entityId**\n     * @summary Get information about a things\\'s location\n     * @param {number} entityId The id of the requested entity\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsEntityIdLocationsGet(entityId: number, $skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsEntityIdLocationsGet(entityId, $skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns all the things provided by this api (subject to any parameters set)\n     * @summary Get all things\n     * @param {number} [$skip] The number of elements to skip from the collection\n     * @param {number} [$top] The number of elements to return\n     * @param {boolean} [$count] Flag indicating if the total number of items in the collection should be returned.\n     * @param {string} [$select] The list of properties that need to be returned\n     * @param {string} [$expand] The list of related queries that need to be included in the result\n     * @param {string} [$filter] A filter query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof ThingsApi\n     */\n    public v11ThingsGet($skip?: number, $top?: number, $count?: boolean, $select?: string, $expand?: string, $filter?: string, options?: AxiosRequestConfig) {\n        return ThingsApiFp(this.configuration).v11ThingsGet($skip, $top, $count, $select, $expand, $filter, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * British Geological Survey Sensors API\n * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return (_vm.data && _vm.data.data)?_c('div',{staticClass:\"plane is-vertical\"},[(_vm.data.type === 'FMM_LOC')?_c('Location',{attrs:{\"data\":_vm.data.data}}):_vm._e(),(_vm.data.type === 'FMM_THING')?_c('Thing',{attrs:{\"data\":_vm.data.data}}):_vm._e(),(_vm.data.type === 'FMM_DATASTREAM')?_c('Datastreams',{attrs:{\"data\":_vm.data.data}}):_vm._e()],1):_vm._e()\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Location\"}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',[_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('description'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.description))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('encodingType'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.encodingType))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('name'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.name))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('location'))+\": \")]),(_vm.data.location)?_c('div',[_vm._v(\"[\"+_vm._s(_vm.data.location.coordinates.join(';'))+\"]\")]):_vm._e()])],1)]),_c('b-tab-item',{attrs:{\"label\":this.$i18n.t('properties').toString()}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1)])],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Thing\"}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',[_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('name'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.name))]),_c('div',{staticClass:\"cap\"},[_vm._v(_vm._s(this.$i18n.t('description'))+\": \")]),_c('div',[_vm._v(_vm._s(_vm.data.description))])])],1)]),_c('b-tab-item',{attrs:{\"label\":this.$i18n.t('properties').toString()}},[_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1)])],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Component, Prop, Vue} from \"vue-property-decorator\";\nimport { Thing} from \"../../openapi/client\";\n@Component\nexport default class ThingC extends Vue{\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data: Thing | undefined;\n\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Thing.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Thing.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Thing.vue?vue&type=template&id=39cf6bf3&scoped=true&\"\nimport script from \"./Thing.vue?vue&type=script&lang=ts&\"\nexport * from \"./Thing.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Thing.vue?vue&type=style&index=0&id=39cf6bf3&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"39cf6bf3\",\n  null\n  \n)\n\nexport default component.exports","\n\nimport {Component, Prop, Vue} from \"vue-property-decorator\";\nimport ThingsC from \"@/components/Thing.vue\";\n@Component({components:{\n    ThingsC\n  }})\nexport default class LocationC extends Vue{\n\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data:unknown;\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Location.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Location.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Location.vue?vue&type=template&id=582f2a56&scoped=true&\"\nimport script from \"./Location.vue?vue&type=script&lang=ts&\"\nexport * from \"./Location.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Location.vue?vue&type=style&index=0&id=582f2a56&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"582f2a56\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),(_vm.data)?_c('div',[_c('b-tabs',{staticClass:\"nopad\",attrs:{\"id\":\"light\"},model:{value:(_vm.activeTab),callback:function ($$v) {_vm.activeTab=$$v},expression:\"activeTab\"}},[_c('b-tab-item',{attrs:{\"label\":\"Datastream\"}},[(_vm.data)?_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.noprops),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1):_vm._e()]),_c('b-tab-item',{attrs:{\"label\":\"Eigenschaften\"}},[(_vm.data.properties)?_c('div',{staticClass:\"dtable\"},[_c('perfect-scrollbar',_vm._l((_vm.data.properties),function(value,key){return _c('div',{key:key,staticClass:\"item\"},[_c('div',{staticClass:\"key cap\"},[_vm._v(_vm._s(key)+\":\")]),_c('div',{staticClass:\"value\"},[_vm._v(_vm._s(value))])])}),0)],1):_vm._e()]),_c('b-tab-item',{attrs:{\"label\":\"Observations\"}},[(_vm.activeTab===2)?_c('Observations',{attrs:{\"id\":_vm.data['@iot.id'],\"title\":_vm.data.name}}):_vm._e()],1)],1)],1):_vm._e()],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"t1\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('div',{staticClass:\"chart\"},[_c('Bar',{staticStyle:{\"{width\":\"100%\",\"height\":\"250px}\"},attrs:{\"data\":_vm.chartdata,\"options\":_vm.chartOptions,\"css-classes\":\"chart\",\"responsive\":\"\"}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","let config= {\n  baseUrl:'http://localhost:8080/sensinact/rest'\n};\n\nexport function setBaseUrl(url:string){\n  config.baseUrl = url;\n}\nexport function getBaseUrl(){\n  return config.baseUrl;\n}\n","\nimport 'chartjs-adapter-moment';\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Configuration, DatastreamsApi, Observations} from \"../../openapi/client\";\n\nimport { Bar } from 'vue-chartjs'\nimport {Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale, TimeScale} from 'chart.js'\nimport moment from \"moment\";\nimport {getBaseUrl} from \"@/config/base\";\n\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale,TimeScale)\n\n@Component({components:{Bar}})\nexport default class ObservationsC extends Vue{\n  private loading = false;\n  @Prop() readonly id: string | undefined;\n  @Prop({default:()=>''}) readonly title: string | undefined ;\n  private observations:Observations|null = null;\n  private chartOptions:any ={\n    maxBarThickness: 2, // number (pixels)\n    barThickness: 'flex',\n    plugins:{\n      legend: {\n        display: true\n      }\n    },\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        'x': {\n          type: 'time',\n          time: {\n            displayFormats: {\n              'millisecond': 'MMM DD',\n              'second': 'MMM DD',\n              'minute': 'MMM DD',\n              'hour': 'MMM DD',\n              'day': 'MMM DD',\n              'week': 'MMM DD',\n              'month': 'MMM DD',\n              'quarter': 'MMM DD',\n              'year': 'MMM DD',\n            }\n          },\n          /*ticks: {\n            // For a category axis, the val is the index so the lookup via getLabelForValue is needed\n            callback: function (val: any, index: any): any {\n              // Hide every 2nd tick label\n              //@ts-ignore\n              return index % 2 === 0 ? this.getLabelForValue(val) : '';\n            }\n          }*/\n        }\n      }\n  }\n  @Watch('id')\n  dataChanged(newD:any){\n    this.loadData()\n  }\n  mounted(){\n    this.loadData()\n  }\n  async loadData(){\n    this.loading = true;\n    try{\n      //@ts-ignore\n      this.observations = (await new DatastreamsApi(new Configuration({basePath:getBaseUrl()})).v11DatastreamsEntityIdObservationsGet(this.id!)).data;\n      console.log(this.observations)\n    }catch (e){\n      console.log(e);\n    }finally {\n      this.loading = false;\n    }\n  }\n  get chartdata(){\n    if(this.observations){\n      return {\n        labels: this.observations.value?.map(e=>moment(e.resultTime,\"YYYY-MM-DD'T'HH:mm:ss.SSSZZ\")),\n        datasets: [\n          {\n            label: this.title,\n            backgroundColor: 'rgb(36,97,162)',\n            data: this.observations.value?.map(e=>e.result)\n          }\n        ]\n      }\n    }else{\n      return {\n        labels: [],\n        datasets: [\n          {\n            label: '',\n            backgroundColor: 'rgba(36,97,162,0.81)',\n            data:  [],\n          }\n        ]\n      }\n    }\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Observations.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Observations.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Observations.vue?vue&type=template&id=4025d978&scoped=true&\"\nimport script from \"./Observations.vue?vue&type=script&lang=ts&\"\nexport * from \"./Observations.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Observations.vue?vue&type=style&index=0&id=4025d978&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4025d978\",\n  null\n  \n)\n\nexport default component.exports","\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport {Datastream} from \"../../openapi/client\";\nimport Observations from \"@/components/Observations.vue\";\n@Component({\n  components: {Observations}\n})\nexport default class DatastreamsC extends Vue{\n  private loading = false;\n  private activeTab = 0;\n  @Prop() readonly data: Datastream | undefined;\n\n  @Watch('data')\n  dataChanged(newD:unknown){\n    console.log(newD)\n  }\n  get noprops(){\n    let ret:any = {};\n    for (const [key,atr] of Object.entries(this.data as object)){\n      if(key!=='properties')\n        ret[key]=atr;\n    }\n    return ret;\n  }\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Datastreams.vue?vue&type=template&id=6e71896e&scoped=true&\"\nimport script from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nexport * from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Datastreams.vue?vue&type=style&index=0&id=6e71896e&prod&scoped=true&lang=scss&\"\nimport style1 from \"./Datastreams.vue?vue&type=style&index=1&id=6e71896e&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6e71896e\",\n  null\n  \n)\n\nexport default component.exports","\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\nimport Location from \"@/components/Location.vue\";\nimport Thing from \"@/components/Thing.vue\";\nimport Datastreams from \"@/components/Datastreams.vue\";\n\n@Component({\n  components: {Datastreams, Location,Thing}\n})\nexport default class PropertiesC extends Vue{\n  @Prop() readonly data:any;\n\n  @Watch('data')data_changed(new_data:any){\n    console.log('new data')\n    console.log(new_data)\n  }\n\n}\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Properties.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Properties.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Properties.vue?vue&type=template&id=19626fbc&scoped=true&\"\nimport script from \"./Properties.vue?vue&type=script&lang=ts&\"\nexport * from \"./Properties.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Properties.vue?vue&type=style&index=0&id=19626fbc&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"19626fbc\",\n  null\n  \n)\n\nexport default component.exports","\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {LIcon, LMap, LMarker, LTileLayer} from \"vue2-leaflet\";\nimport {LocationsApi, Location, Locations, Configuration} from \"../../openapi/client\";\nimport PropertiesC from \"@/components/PropertiesView/Properties.vue\";\nimport {BASE_PATH} from \"../../openapi/client/base\";\nimport {getBaseUrl, setBaseUrl} from \"@/config/base\";\n\n@Component({\n  components: {\n    PropertiesC,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon\n  }\n})\nexport default class Map extends Vue {\n  private url = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n  private attribution =\n    '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n  private zoom = 15;\n\n  private center = [50.93115286, 11.60392726];\n  private markerLatLng = [55.8382551745062, -4.20119980206699]\n  private points: Array<Location> | undefined = [];\n  private selected: Location | null = {'@iot.id': undefined};\n  private treeData: unknown = null;\n  //private baseurl:string = 'https://sensors.bgs.ac.uk/FROST-Server';\n  private baseurl:string = 'http://localhost:8080/sensinact/rest';\n\n\n  async mounted() {\n    //await this.load();\n  }\n\n  async load() {\n    this.points = ((await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsGet()).data as Locations)?.value;\n  }\n\n  res(arr: any) {\n    return [arr[1], arr[0]]\n  }\n  connect(){\n    console.log('connect')\n    setBaseUrl(this.baseurl)\n    console.log(getBaseUrl())\n    this.load();\n  }\n  markerWasClicked(point: Location) {\n\n    this.$router.push('/location/' + point[\"@iot.id\"])\n    //this.$route.params\n  }\n\n  @Watch('$route.params', {immediate: true})\n  params_chanded(params: any) {\n    this.selected = params.id;\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Map.vue?vue&type=template&id=014cc5ba&scoped=true&\"\nimport script from \"./Map.vue?vue&type=script&lang=ts&\"\nexport * from \"./Map.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Map.vue?vue&type=style&index=0&id=014cc5ba&prod&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"014cc5ba\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"plane tree\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('perfect-scrollbar',[_c('v-treeview',{attrs:{\"treeTypes\":_vm.treeTypes,\"openAll\":_vm.openAll,\"contextItems\":_vm.contextItems},on:{\"selected\":_vm.selected,\"contextSelected\":_vm.contextSelected},model:{value:(_vm.treeData),callback:function ($$v) {_vm.treeData=$$v},expression:\"treeData\"}})],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {\n  Configuration,\n  Datastream,\n  Datastreams,\n  DatastreamsApi,\n  Location,\n  LocationsApi, Observation, Observations,\n  Thing,\n  Things,\n  ThingsApi\n} from \"../../openapi/client\";\nimport ThingsC from \"@/components/Thing.vue\";\n//@ts-ignore\nimport VTreeview from \"v-treeview\"\nimport {getBaseUrl} from \"@/config/base\";\n@Component({components:{\n    ThingsC,\n    VTreeview\n  }})\nexport default class TreeC extends Vue{\n\n  private loading = false;\n  private location:Location|null = null;\n  private openAll = true;\n  private treeTypes = [\n    {\n      type: \"#\",\n      max_children: 6,\n      max_depth: 25,\n      valid_children: [\n        \"FMM_THINGS\",\n        \"FMM_LOC\",\n        \"FMM_THING\",\n        \"FMM_DATASTREAMS\",\n        \"FMM_DATASTREAM\",\n        \"FMM_OBSERVATION\"\n      ]\n    },\n    {\n      type: \"FMM_THINGS\",\n      icon: \"fa-regular fa-circle\",\n      valid_children: [\"Basic\", \"Top-up\",'FMM_THING']\n    },\n    {\n      type: \"FMM_LOC\",\n      icon: \"fa-regular fa-map\",\n      valid_children: [\"Basic\", \"Top-up\",'FMM_THINGS']\n    },\n    {\n      type: \"FMM_THING\",\n      icon: \"fa-solid fa-circle\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_DATASTREAMS\"]\n    },\n    {\n      type: \"FMM_DATASTREAMS\",\n      icon: \"fa-solid fa-rss\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_DATASTREAM\"]\n    },\n    {\n      type: \"FMM_DATASTREAM\",\n      icon: \"fa-solid fa-rss\",\n      valid_children: [\"Basic\", \"Top-up\",\"FMM_OBSERVATION\"]\n    },\n    {\n      type: \"FMM_OBSERVATION\",\n      icon: \"far fa-user\",\n      valid_children: [\"Basic\", \"Top-up\"]\n    },\n    {\n      type: \"FMM_PARENT_IN_LAW\",\n      icon: \"far fa-user\",\n      valid_children: [\"Basic\", \"Top-up\"]\n    },\n    {\n      type: \"Basic\",\n      icon: \"far fa-hospital\",\n      valid_children: [\"Top-up\"]\n    },\n    {\n      type: \"Top-up\",\n      icon: \"far fa-plus-square\",\n      valid_children: []\n    }\n  ];\n  private treeData:any = [];\n  private contextItems:any = [];\n  private selectedNode:any = null\n\n  mounted(){\n    this.loadData()\n  }\n  async loadData(){\n    try{\n      this.treeData = [];\n      this.loading = true;\n      //@ts-ignore\n      this.location = (await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsEntityIdGet(this.$route.params.id)).data;\n      console.log(this.location)\n      this.treeData.push({\n        id: Math.random()*100000, text: \"Location \"+this.location.name, type: \"FMM_LOC\", count: 0,\n        children: [\n          {id: Math.random()*100000, text: \"THINGS\", type: \"FMM_THINGS\", children:[]}\n        ]\n      },)\n\n    }catch (e){\n      console.log(e);\n      this.$router.push({name:'Map'})\n    }\n    finally{\n      this.loading = false;\n    }\n  }\n  @Watch('$route.params.id')\n  id_changed(){\n    this.loadData()\n  }\n  async selected(node:any){\n    this.selectedNode = node;\n    switch(node.model.type){\n      case 'FMM_LOC':\n        this.$emit('TreeSelect',{type:'FMM_LOC',data:this.location})\n        break;\n      case 'FMM_THINGS':\n          this.$emit('TreeSelect',{type:'FMM_THINGS',data:null})\n          node.model.children=[];\n          (await this.getThingsTree()).forEach((child:unknown)=>{\n            node.addNode(child)\n          })\n        break;\n      case 'FMM_THING':{\n        this.$emit('TreeSelect',{type:'FMM_THING',data: node.model._data})\n        node.model.children=[]\n        const datastreams: unknown[] = await this.getDatascreamsTree(node.model._data['@iot.id']);\n        const datastreamsNode:any = {id: Math.random()*100000, text:'DATASTREAMS', type: \"FMM_DATASTREAMS\", children: []}\n        datastreams.forEach((child:unknown)=>{\n          datastreamsNode.children.push(child);\n        })\n        node.addNode(datastreamsNode)\n        break;\n      }\n      case 'FMM_DATASTREAMS':\n        this.$emit('TreeSelect',{type:'FMM_DATASTREAMS',data:null});\n        break;\n      case 'FMM_DATASTREAM':\n        this.$emit('TreeSelect',{type:'FMM_DATASTREAM',data: node.model._data});\n        /*node.model.children=[]\n        const observations:Object[] = await this.getObservationTree(node.model._data['@iot.id'])\n        node.children = [];\n        observations.forEach((child:Object)=>{\n          node.addNode(child)\n        })*/\n        break;\n    }\n  }\n  async getThingsTree(): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const things = (await new LocationsApi(new Configuration({basePath:getBaseUrl()})).v11LocationsEntityIdThingsGet(this.$route.params.id)).data as Things\n    this.loading = false;\n    let ret:unknown[] = [];\n    things.value?.forEach((thing:Thing)=>{\n      let node = {id: Math.random()*100000, text:  (thing as Thing).name, type: \"FMM_THING\", children: [],_data:thing}\n      ret.push(node);\n    });\n    return ret;\n  }\n\n  async getDatascreamsTree(id:string): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const datastreams = (await new ThingsApi(new Configuration({basePath:getBaseUrl()})).v11ThingsEntityIdDatastreamsGet(id)).data as Datastreams\n    this.loading = false;\n    let ret:unknown[] = [];\n    datastreams.value?.forEach((datastream:Datastream)=>{\n      let node = {id: Math.random()*100000, text:  (datastream as Datastream).name, type: \"FMM_DATASTREAM\", children: [],_data:datastream}\n      ret.push(node);\n    });\n    return ret;\n  }\n  async getObservationTree(id:string): Promise<unknown[]>{\n    this.loading = true;\n    //@ts-ignore\n    const observations = (await new DatastreamsApi(new Configuration({basePath:getBaseUrl()})).v11DatastreamsEntityIdObservationsGet(id)).data as Observations\n    this.loading = false;\n    let ret:unknown[] = [];\n    observations.value?.forEach((observation:Observation)=>{\n      let node = {id: Math.random()*100000, text:  (observation as Observation)[\"@iot.id\"], type: \"FMM_OBSERVATION\", children: [],_data:observation}\n      ret.push(node);\n    });\n    return ret;\n  }\n\n  getTypeRule(type:any) {\n    var typeRule = this.treeTypes.filter(t => t.type == type)[0];\n    return typeRule;\n  }\n  contextSelected(command:any) {\n    switch (command) {\n      case \"Create Basic\":\n        this.selectedNode.addNode({\n          text: \"New Basic Plan\",\n          type: \"Basic\",\n          children: []\n        });\n        break;\n      case \"Create Top-up\":\n        this.selectedNode.addNode({\n          text: \"New Top-up\",\n          type: \"Top-up\",\n          children: []\n        });\n        break;\n      case \"Rename\":\n        this.selectedNode.editName();\n        break;\n      case \"Remove\":\n        break;\n    }\n  }\n\n\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tree.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tree.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Tree.vue?vue&type=template&id=22d7c98c&scoped=true&\"\nimport script from \"./Tree.vue?vue&type=script&lang=ts&\"\nexport * from \"./Tree.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Tree.vue?vue&type=style&index=0&id=22d7c98c&prod&scoped=true&lang=scss&\"\nimport style1 from \"./Tree.vue?vue&type=style&index=1&id=22d7c98c&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"22d7c98c\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"grid\",attrs:{\"id\":\"app\"}},[_c('div',{staticClass:\"url colspan2 titlebar\"},[_vm._m(0),_c('b-field',[_c('b-input',{model:{value:(_vm.baseurl),callback:function ($$v) {_vm.baseurl=$$v},expression:\"baseurl\"}}),_c('b-button',{attrs:{\"outlined\":\"\"},on:{\"click\":function($event){return _vm.connect()}}},[_vm._v(\"Connect\")])],1)],1),_c('div',{staticClass:\"map_holder\"},[_c('l-map',{attrs:{\"id\":\"map\",\"zoom\":_vm.zoom,\"center\":_vm.center},on:{\"click\":_vm.deselect}},[_c('l-tile-layer',{attrs:{\"url\":_vm.url,\"attribution\":_vm.attribution}}),(_vm.points)?_c('v-marker-cluster',{ref:\"clusterRef\",attrs:{\"options\":{spiderfyDistanceMultiplier:3.2,animate:true,animateAddingMarkers:true}}},_vm._l((_vm.points),function(point){return _c('custom-marker',{key:point['dsid'],attrs:{\"marker\":_vm.ret(point.location.coordinates),\"lat-lng\":_vm.res(point.location.coordinates)},nativeOn:{\"click\":function($event){return ((ev)=>{ev.stopImmediatePropagation();_vm.markerWasClicked(point)}).apply(null, arguments)}}},[_c('div',{staticClass:\"marker-pin\",class:{'selected':point===_vm.selected}},[_c('div',{staticClass:\"round\"},[(_vm.datastreamsbyID[point['dsid']] && _vm.datastreamsbyID[point['dsid']].properties['sensorthings.datastream.type'])?_c('div',{staticClass:\"svg_icon dark\",class:[_vm.datastreamsbyID[point['dsid']].properties['sensorthings.datastream.type']]}):_vm._e()])]),_c('div',{staticClass:\"marker-value\"},[_c('Datapoint',{attrs:{\"id\":point['dsid'],\"unit\":_vm.datastreamsbyID[point['dsid']].unitOfMeasurement.name}})],1)])}),1):_vm._e()],1)],1),_c('div',{staticClass:\"sidebar_holder absolute\"},[_c('StreamTree',{ref:\"streamTree\",on:{\"selection\":_vm.select}})],1),(_vm.selected!==null)?_c('div',{staticClass:\"propertie_holder absolute\"},[_c('PropertiesC',{attrs:{\"data\":_vm.selectedData}})],1):_vm._e()])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"logo\"},[_c('div',{staticClass:\"white triangle\"}),_c('div',{staticClass:\"small logo smart_city\",attrs:{\"id\":\"logo\"}})])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"plane tree\"},[_c('b-loading',{attrs:{\"active\":_vm.loading,\"can-cancel\":false,\"is-full-page\":false}}),_c('perfect-scrollbar',[_c('div',{staticClass:\"tree\"},_vm._l((_vm.treeData),function(leaf){return _c('div',{key:leaf.key,staticClass:\"leaf\",class:[{'active': leaf.active},leaf.text],on:{\"click\":function($event){return _vm.selected(leaf)}}},[_c('div',{staticClass:\"cat_icon\"},[_c('div',{staticClass:\"svg_icon\",class:[leaf.text]}),_c('b-tag',{attrs:{\"rounded\":\"\",\"type\":\"is-primary\"}},[_vm._v(_vm._s(leaf._data.length))])],1),_vm._v(\" \"+_vm._s(_vm.$t('prop.'+leaf.text))+\" \")])}),0)])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import {Datastream, Datastreams} from \"../../openapi/client\";\n\nexport default function groupByName(datastreams:Datastreams){\n  let ret:any = {}\n\n  datastreams.value?.forEach((datastream:Datastream)=>{\n    if(datastream.name) {\n      if (!ret[datastream.name]) {\n        ret[datastream.name] = [];\n      }\n      ret[datastream.name].push(datastream);\n    }\n  })\n  return ret;\n}\n\nexport function groupByCategory(datastreams:Datastreams){\n  let ret:any = {}\n\n  datastreams.value?.forEach((datastream:Datastream)=>{\n    //@ts-ignore\n    let type = datastream.properties['sensorthings.datastream.type'];\n    if(datastream.properties && type && datastream.name) {\n      if (!ret[type]) {\n        ret[type] = [];\n      }\n      ret[type].push(datastream);\n    }\n  })\n  return ret;\n}\n","\n\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {\n  Configuration,\n  Datastream,\n  Datastreams,\n  DatastreamsApi,\n  Location, Locations,\n  LocationsApi, Observation, Observations,\n  Thing,\n  Things,\n  ThingsApi\n} from \"../../openapi/client\";\nimport ThingsC from \"@/components/Thing.vue\";\n//@ts-ignore\nimport VTreeview from \"v-treeview\"\nimport {getBaseUrl} from \"@/config/base\";\nimport groupByName, {groupByCategory} from \"@/helper/DatastreamGroups\";\n@Component({components:{\n    VTreeview\n  }})\nexport default class StreamTreeC extends Vue{\n\n  private loading = false;\n\n\n  private treeData:any = [];\n\n  private selectedNodesKeys:any = {};\n\n  mounted(){\n    //this.getDatascreamsTree()\n  }\n\n\n  async selected(node:any){\n    console.log(node)\n    if(node.active){\n      delete this.selectedNodesKeys[node.key];\n      node.active = false;\n    }else{\n      this.selectedNodesKeys[node.key] = node._data ;\n      node.active = true;\n    }\n\n    let emit:any = [];\n    for(let key in this.selectedNodesKeys){\n      console.log(this.selectedNodesKeys[key])\n      emit = emit.concat(this.selectedNodesKeys[key])\n    }\n    console.log(emit)\n    this.$emit('selection', emit)\n\n  }\n\n\n\n  async getDatascreamsTree(datastreams:Datastreams){\n    this.loading = true;\n\n    this.loading = false;\n    let ret:unknown[] = [];\n    let groups = groupByCategory(datastreams)\n    for (const [key, value] of Object.entries(groups)) {\n\n\n      let node = {id: Math.random()*100000, text:  key, type: \"FMM_DATASTREAM\", children: [],_data:value, key:key, active:false}\n      ret.push(node);\n    }\n    this.treeData = ret;\n  }\n\n  get isactive(){\n    console.log('isa');\n   return Object.keys(this.selectedNodesKeys)\n  }\n  set isactive(val:any){\n\n  }\n}\n\n\n\n\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./StreamTree.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./StreamTree.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./StreamTree.vue?vue&type=template&id=e6f9f2fa&scoped=true&\"\nimport script from \"./StreamTree.vue?vue&type=script&lang=ts&\"\nexport * from \"./StreamTree.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./StreamTree.vue?vue&type=style&index=0&id=e6f9f2fa&prod&scoped=true&lang=scss&\"\nimport style1 from \"./StreamTree.vue?vue&type=style&index=1&id=e6f9f2fa&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e6f9f2fa\",\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"datapoint\"},[_vm._v(\" \"+_vm._s(_vm.data)+\" \"+_vm._s(_vm.unit)+\" \")])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\nimport {Component, Prop, Vue, Watch} from \"vue-property-decorator\";\n\n@Component\nexport default class Datapoint extends Vue{\n  private data = ''\n  @Prop({default:()=>''}) readonly unit:any\n  @Prop() readonly id:any\n  mounted(){\n    /*setInterval(()=>{\n      console.log(this.obs)\n    },1000)*/\n  }\n  @Watch('$sstore.obs.state.obs') handler(data:any){\n    console.log('obs_change')\n    if(this.$sstore.obs.state.obs && this.$sstore.obs.state.obs[this.id] && this.$sstore.obs.state.obs[this.id].result){\n      this.data = this.$sstore.obs.state.obs[this.id].result;\n\n    }else{\n      this.data = '';\n    }\n  }\n\n}\n\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datapoint.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datapoint.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Datapoint.vue?vue&type=template&id=2c5458ba&scoped=true&\"\nimport script from \"./Datapoint.vue?vue&type=script&lang=ts&\"\nexport * from \"./Datapoint.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Datapoint.vue?vue&type=style&index=0&id=2c5458ba&prod&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"2c5458ba\",\n  null\n  \n)\n\nexport default component.exports","\nimport {Component, Vue, Watch} from \"vue-property-decorator\";\nimport {LIcon, LMap, LMarker, LTileLayer,LWMSTileLayer} from \"vue2-leaflet\";\nimport {\n  LocationsApi,\n  Location,\n  Locations,\n  Configuration,\n  Datastream,\n  ThingsApi,\n  DatastreamsApi,\n  ObservationsApi, Observations, Datastreams\n} from \"../../openapi/client\";\nimport PropertiesC from \"@/components/PropertiesView/Properties.vue\";\nimport {BASE_PATH} from \"../../openapi/client/base\";\nimport {getBaseUrl, setBaseUrl} from \"@/config/base\";\nimport StreamTree from \"@/components/StreamTree.vue\";\nimport {AxiosResponse} from \"axios\";\n//@ts-ignore\nimport Vue2LeafletMarkerCluster from 'vue2-leaflet-markercluster';\nimport Vue2LeafletMarkercluster from \"vue2-leaflet-markercluster/Vue2LeafletMarkercluster.vue\";\n//@ts-ignore\nimport CustomMarker from 'vue-leaflet-custom-marker';\nimport Datapoint from \"@/components/Datapoint.vue\";\nexport interface LocationsPlus{\n  dsid:String|undefined\n}\n\n@Component({\n  components: {\n    Datapoint,\n    StreamTree,\n    PropertiesC,\n    LMap,\n    LTileLayer,\n    LMarker,\n    LIcon,\n    LWMSTileLayer,\n    'v-marker-cluster': Vue2LeafletMarkercluster,\n    CustomMarker\n  }\n})\nexport default class DatastreamsV extends Vue {\n private url = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n  //private url = 'https://map.jena.de/wms/kartenportal';\n  private attribution =\n    '&copy; <a target=\"_blank\" href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors';\n  private zoom = 15;\n\n  private center = [50.93115286, 11.60392726];\n  private markerLatLng = [55.8382551745062, -4.20119980206699]\n  private points: Array<Location> | undefined = [];\n  private selected: Location | null = null;\n  private obs:any ={};\n  private treeData: unknown = null;\n  //private baseurl:string = 'https://sensors.bgs.ac.uk/FROST-Server';\n  private baseurl:string = 'http://localhost:8080/sensinact/rest';\n  private datastreams: Datastreams|null = null;\n  private datastreamsbyID: {[key:string]:Datastream} = {};\n  private timer:any  = null;\n  private selectedData:any  = null;\n\n  async mounted() {\n    await this.load();\n  }\n\n  async load() {\n    ///@ts-ignore\n    this.datastreams = (await new DatastreamsApi(new Configuration({basePath:getBaseUrl()}))\n      .v11DatastreamsGet()).data as Datastreams\n    (this.$refs.streamTree as StreamTree).getDatascreamsTree(this.datastreams)\n    if(this.datastreams.value){\n      for (let datastream of this.datastreams.value){\n        //@ts-ignore\n        this.datastreamsbyID[datastream[\"@iot.id\"]] = datastream;\n      }\n    }\n\n  }\n  deselect(){\n    this.selected = null;\n    //@ts-ignore\n    this.selectedData = null;\n  }\n  res(arr: any) {\n    return [arr[1], arr[0]]\n  }\n\n  ret(arr:any){\n    return {\n      lat:arr[1],\n      lng:arr[0]\n    }\n  }\n  connect(){\n    console.log('connect')\n    setBaseUrl(this.baseurl)\n    console.log(getBaseUrl())\n    this.load();\n\n  }\n  markerWasClicked(point: Location&LocationsPlus) {\n\n\n      this.selected = point;\n      //@ts-ignore\n      this.selectedData = {data:this.datastreamsbyID[point['dsid']],type:'FMM_DATASTREAM'}\n    //this.$router.push('/location/' + point[\"@iot.id\"])\n    //this.$route.params\n  }\n\n\n\n  async select(model:Datastream[]){\n    this.points = undefined;\n    let proms:Promise<any>[] = [];\n    model.forEach((datastream:Datastream)=>{\n      if(datastream && datastream[\"@iot.id\"]){\n\n        //@ts-ignore\n        proms.push(new Promise(async (res,rej)=> {\n          try {\n            //@ts-ignore\n            let result = await new ThingsApi(new Configuration({basePath: getBaseUrl()})).v11ThingsEntityIdLocationsGet((datastream[\"@iot.id\"].toString().split('~')[0]));\n            if(result.data && result.data.value && result.data.value[0]){\n              //@ts-ignore\n              (result.data.value[0] as LocationsPlus)['dsid'] = datastream[\"@iot.id\"];\n            }\n            res(result);\n          } catch (e) {\n            rej(e)\n          }\n          }));\n        }})\n      let thingsLoaction:AxiosResponse<Locations&LocationsPlus>[] = await Promise.all(proms);\n\n    this.points = thingsLoaction.map((e:AxiosResponse<Locations&LocationsPlus>)=>{\n      return (e.data.value![0])\n    });\n    this.$sstore.obs.setPoints(this.points);\n    this.$sstore.obs.getDataForPoints();\n    if(this.points.length > 0){\n      this.$sstore.obs.settimer();\n    }else{\n      this.$sstore.obs.clearTimer();\n    }\n\n\n  }\n\n  beforeDestroy(){\n    this.$sstore.obs.clearTimer();\n  }\n}\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Datastreams.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Datastreams.vue?vue&type=template&id=1257a0f1&scoped=true&\"\nimport script from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nexport * from \"./Datastreams.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Datastreams.vue?vue&type=style&index=0&id=1257a0f1&prod&scoped=true&lang=scss&\"\nimport style1 from \"./Datastreams.vue?vue&type=style&index=1&id=1257a0f1&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1257a0f1\",\n  null\n  \n)\n\nexport default component.exports","/*********************************************************************\n * Copyright (c) YYYY Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport Vue from 'vue'\nimport VueRouter, { RouteConfig } from 'vue-router'\nimport Map from \"@/views/Map.vue\";\nimport Tree from \"@/components/Tree.vue\";\nimport DatastreamsV from \"@/views/Datastreams.vue\";\n\nVue.use(VueRouter)\n\nconst routes: Array<RouteConfig> = [\n  {\n    path: '/',\n    name: 'map',\n    component: Map,\n    children:[{\n      path: 'location/:id',\n      component: Tree,\n    }]\n  },\n  {\n    path: '/datastreams',\n    name: 'datastreams',\n    component: DatastreamsV,\n  }\n]\n\nconst router = new VueRouter({\n  mode: 'hash',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport default router\n","/*********************************************************************\n * Copyright (c) YYYY Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport VueI18n from \"vue-i18n\";\nimport TranslationDE from \"@/locales/de/translation.json\";\n\nimport Vue from \"vue\";\n\nVue.use(VueI18n);\nconst i18n:VueI18n = new VueI18n({\n    locale: 'de', // set locale\n    messages:{\n        de:TranslationDE,\n    },\n\n});\nexport default i18n;\n","import {SimpleStore} from \"@/store/SimpleStore\";\nimport Vue from \"vue\";\nimport {AxiosResponse} from \"axios/index\";\nimport {Configuration, Observations, ObservationsApi} from \"../../openapi/client\";\nimport {getBaseUrl} from \"@/config/base\";\nimport {LocationsPlus} from \"@/views/Datastreams.vue\";\n\n\n\nexport default class ObsStore implements SimpleStore {\n\n  public state = Vue.observable({\n    obs: {},\n\n  });\n  public loading:boolean = Vue.observable(false);\n  private timer:any = null;\n  private points:any = [];\n\n\n  constructor(){\n\n\n  };\n  setPoints(points:any){\n    this.points = points\n  }\n  async getDataForPoints(){\n    let proms:Promise<AxiosResponse<Observations&LocationsPlus>>[] = []\n    this.points?.forEach((point:any)=>{\n\n      //@ts-ignore\n      proms.push(\n        new Promise(async (res,rej)=>{\n          try{\n            //@ts-ignore\n            let result:AxiosResponse<> = await new ObservationsApi(new Configuration({basePath:getBaseUrl()})).v11ObservationsEntityIdDatastreamObservationsGet(point[\"dsid\"]);\n            if(result.data && result.data.value && result.data.value[0]){\n              //@ts-ignore\n              (result.data.value[0] as LocationsPlus)['dsid'] = point[\"dsid\"];\n            }\n            res(result);\n          }catch (e){\n            rej(e)\n          }\n        }));\n\n    })\n    let promsSettled = await Promise.allSettled(proms);\n    //this.obs= new Map();\n    promsSettled.forEach((obj:any) => {\n      if(obj.value && obj.value.data && obj.value.data.value && obj.value.data.value[0]){\n        let value:String = obj.value.data.value[0]['dsid'] as String\n        //@ts-ignore\n        this.state.obs[value] = obj.value.data.value[0];\n      }\n\n\n    });\n    this.state.obs = {...this.state.obs};\n    //this.points = this.points?.slice(0);\n    //console.log(this.points)\n\n\n  }\n\n  public settimer(){\n    if(!this.timer){\n      this.timer = setInterval(()=>this.getDataForPoints(),10000)\n    }\n  }\n  public clearTimer(){\n    if(this.timer) {\n      clearInterval(this.timer)\n      this.timer = null;\n    }\n  }\n  update():any {\n\n  }\n}\n","\n\n\n\n/*export interface simpleStoreIF{\n    toolname: ToolnameStore,\n    toolImage: ToolImageStore,\n    strokes: StokesStore,\n    counters: CounterStore,\n    headImage: HeadImageStore\n}*/\nimport ObsStore from \"@/store/ObsStore\";\n\nexport interface simpleStoreIF{\n    [index: string]: SimpleStore;\n}\n\n\n\nexport const simpleStore:simpleStoreIF = {\n    obs:new ObsStore(),\n\n};\n\nexport default {\n    install(Vue:any, options:any) {\n        Vue.prototype.$sstore = simpleStore;\n    },\n    update(){\n      for (let key in simpleStore){\n          simpleStore[key].update();\n      }\n    }\n\n};\n\n\nexport interface SimpleStore {\n    state: any\n\n    update():any\n\n}\n","/*********************************************************************\n * Copyright (c) YYYY Contributors to the Eclipse Foundation.\n *\n * This program and the accompanying materials are made\n * available under the terms of the Eclipse Public License 2.0\n * which is available at https://www.eclipse.org/legal/epl-2.0/\n *\n * SPDX-License-Identifier: EPL-2.0\n *\n * Contributors:\n *   Markus Hochstein\n **********************************************************************/\n\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport 'leaflet/dist/leaflet.css';\nimport {Icon} from \"leaflet\";\nimport Buefy from 'buefy'\nimport 'buefy/dist/buefy.css'\nimport i18n from \"@/i18n\";\nimport VueI18n from \"vue-i18n\";\n// @ts-ignore\nimport VueTreeList from 'vue-tree-list';\nimport './scss/general.scss';\nimport '@mdi/font/css/materialdesignicons.css'\nimport PerfectScrollbar from \"vue2-perfect-scrollbar\";\nimport \"vue2-perfect-scrollbar/dist/vue2-perfect-scrollbar.css\";\nimport SimpleStore from './store/SimpleStore'\nVue.use(SimpleStore);\nVue.use(PerfectScrollbar);\nVue.use(VueTreeList)\nVue.use(SimpleStore);\nVue.config.productionTip = false\n//@ts-ignore\ndelete Icon.Default.prototype._getIconUrl;\nIcon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n});\n\ntype D = Icon.Default & {\n  _getIconUrl?: string;\n};\n\ndelete (Icon.Default.prototype as D)._getIconUrl;\nVue.use(Buefy);\nVue.use(VueI18n);\n\nnew Vue({\n  router,\n  i18n,\n  render: h => h(App)\n}).$mount('#app')\n","var map = {\n\t\"./af\": 2496,\n\t\"./af.js\": 2496,\n\t\"./ar\": 186,\n\t\"./ar-dz\": 6881,\n\t\"./ar-dz.js\": 6881,\n\t\"./ar-kw\": 6265,\n\t\"./ar-kw.js\": 6265,\n\t\"./ar-ly\": 451,\n\t\"./ar-ly.js\": 451,\n\t\"./ar-ma\": 8625,\n\t\"./ar-ma.js\": 8625,\n\t\"./ar-sa\": 8819,\n\t\"./ar-sa.js\": 8819,\n\t\"./ar-tn\": 7092,\n\t\"./ar-tn.js\": 7092,\n\t\"./ar.js\": 186,\n\t\"./az\": 4421,\n\t\"./az.js\": 4421,\n\t\"./be\": 7067,\n\t\"./be.js\": 7067,\n\t\"./bg\": 3871,\n\t\"./bg.js\": 3871,\n\t\"./bm\": 4242,\n\t\"./bm.js\": 4242,\n\t\"./bn\": 8189,\n\t\"./bn-bd\": 2507,\n\t\"./bn-bd.js\": 2507,\n\t\"./bn.js\": 8189,\n\t\"./bo\": 5799,\n\t\"./bo.js\": 5799,\n\t\"./br\": 7803,\n\t\"./br.js\": 7803,\n\t\"./bs\": 8434,\n\t\"./bs.js\": 8434,\n\t\"./ca\": 4581,\n\t\"./ca.js\": 4581,\n\t\"./cs\": 8004,\n\t\"./cs.js\": 8004,\n\t\"./cv\": 4464,\n\t\"./cv.js\": 4464,\n\t\"./cy\": 163,\n\t\"./cy.js\": 163,\n\t\"./da\": 803,\n\t\"./da.js\": 803,\n\t\"./de\": 233,\n\t\"./de-at\": 7607,\n\t\"./de-at.js\": 7607,\n\t\"./de-ch\": 6777,\n\t\"./de-ch.js\": 6777,\n\t\"./de.js\": 233,\n\t\"./dv\": 6969,\n\t\"./dv.js\": 6969,\n\t\"./el\": 9618,\n\t\"./el.js\": 9618,\n\t\"./en-au\": 9245,\n\t\"./en-au.js\": 9245,\n\t\"./en-ca\": 5036,\n\t\"./en-ca.js\": 5036,\n\t\"./en-gb\": 1438,\n\t\"./en-gb.js\": 1438,\n\t\"./en-ie\": 6053,\n\t\"./en-ie.js\": 6053,\n\t\"./en-il\": 134,\n\t\"./en-il.js\": 134,\n\t\"./en-in\": 847,\n\t\"./en-in.js\": 847,\n\t\"./en-nz\": 1363,\n\t\"./en-nz.js\": 1363,\n\t\"./en-sg\": 9022,\n\t\"./en-sg.js\": 9022,\n\t\"./eo\": 8990,\n\t\"./eo.js\": 8990,\n\t\"./es\": 9817,\n\t\"./es-do\": 8155,\n\t\"./es-do.js\": 8155,\n\t\"./es-mx\": 952,\n\t\"./es-mx.js\": 952,\n\t\"./es-us\": 9358,\n\t\"./es-us.js\": 9358,\n\t\"./es.js\": 9817,\n\t\"./et\": 5396,\n\t\"./et.js\": 5396,\n\t\"./eu\": 4338,\n\t\"./eu.js\": 4338,\n\t\"./fa\": 7030,\n\t\"./fa.js\": 7030,\n\t\"./fi\": 2292,\n\t\"./fi.js\": 2292,\n\t\"./fil\": 3578,\n\t\"./fil.js\": 3578,\n\t\"./fo\": 8900,\n\t\"./fo.js\": 8900,\n\t\"./fr\": 6067,\n\t\"./fr-ca\": 8362,\n\t\"./fr-ca.js\": 8362,\n\t\"./fr-ch\": 9404,\n\t\"./fr-ch.js\": 9404,\n\t\"./fr.js\": 6067,\n\t\"./fy\": 6742,\n\t\"./fy.js\": 6742,\n\t\"./ga\": 8152,\n\t\"./ga.js\": 8152,\n\t\"./gd\": 6920,\n\t\"./gd.js\": 6920,\n\t\"./gl\": 7234,\n\t\"./gl.js\": 7234,\n\t\"./gom-deva\": 2759,\n\t\"./gom-deva.js\": 2759,\n\t\"./gom-latn\": 7054,\n\t\"./gom-latn.js\": 7054,\n\t\"./gu\": 8166,\n\t\"./gu.js\": 8166,\n\t\"./he\": 8927,\n\t\"./he.js\": 8927,\n\t\"./hi\": 2153,\n\t\"./hi.js\": 2153,\n\t\"./hr\": 9329,\n\t\"./hr.js\": 9329,\n\t\"./hu\": 6680,\n\t\"./hu.js\": 6680,\n\t\"./hy-am\": 5023,\n\t\"./hy-am.js\": 5023,\n\t\"./id\": 6655,\n\t\"./id.js\": 6655,\n\t\"./is\": 0,\n\t\"./is.js\": 0,\n\t\"./it\": 5107,\n\t\"./it-ch\": 3045,\n\t\"./it-ch.js\": 3045,\n\t\"./it.js\": 5107,\n\t\"./ja\": 9175,\n\t\"./ja.js\": 9175,\n\t\"./jv\": 4853,\n\t\"./jv.js\": 4853,\n\t\"./ka\": 8684,\n\t\"./ka.js\": 8684,\n\t\"./kk\": 312,\n\t\"./kk.js\": 312,\n\t\"./km\": 1271,\n\t\"./km.js\": 1271,\n\t\"./kn\": 7256,\n\t\"./kn.js\": 7256,\n\t\"./ko\": 4833,\n\t\"./ko.js\": 4833,\n\t\"./ku\": 5258,\n\t\"./ku.js\": 5258,\n\t\"./ky\": 3430,\n\t\"./ky.js\": 3430,\n\t\"./lb\": 7665,\n\t\"./lb.js\": 7665,\n\t\"./lo\": 2238,\n\t\"./lo.js\": 2238,\n\t\"./lt\": 920,\n\t\"./lt.js\": 920,\n\t\"./lv\": 8769,\n\t\"./lv.js\": 8769,\n\t\"./me\": 818,\n\t\"./me.js\": 818,\n\t\"./mi\": 5722,\n\t\"./mi.js\": 5722,\n\t\"./mk\": 7117,\n\t\"./mk.js\": 7117,\n\t\"./ml\": 9904,\n\t\"./ml.js\": 9904,\n\t\"./mn\": 8590,\n\t\"./mn.js\": 8590,\n\t\"./mr\": 9544,\n\t\"./mr.js\": 9544,\n\t\"./ms\": 176,\n\t\"./ms-my\": 8850,\n\t\"./ms-my.js\": 8850,\n\t\"./ms.js\": 176,\n\t\"./mt\": 291,\n\t\"./mt.js\": 291,\n\t\"./my\": 4830,\n\t\"./my.js\": 4830,\n\t\"./nb\": 4893,\n\t\"./nb.js\": 4893,\n\t\"./ne\": 8782,\n\t\"./ne.js\": 8782,\n\t\"./nl\": 8337,\n\t\"./nl-be\": 2297,\n\t\"./nl-be.js\": 2297,\n\t\"./nl.js\": 8337,\n\t\"./nn\": 8272,\n\t\"./nn.js\": 8272,\n\t\"./oc-lnc\": 277,\n\t\"./oc-lnc.js\": 277,\n\t\"./pa-in\": 6198,\n\t\"./pa-in.js\": 6198,\n\t\"./pl\": 5231,\n\t\"./pl.js\": 5231,\n\t\"./pt\": 3141,\n\t\"./pt-br\": 9626,\n\t\"./pt-br.js\": 9626,\n\t\"./pt.js\": 3141,\n\t\"./ro\": 2797,\n\t\"./ro.js\": 2797,\n\t\"./ru\": 48,\n\t\"./ru.js\": 48,\n\t\"./sd\": 23,\n\t\"./sd.js\": 23,\n\t\"./se\": 7339,\n\t\"./se.js\": 7339,\n\t\"./si\": 2851,\n\t\"./si.js\": 2851,\n\t\"./sk\": 9764,\n\t\"./sk.js\": 9764,\n\t\"./sl\": 646,\n\t\"./sl.js\": 646,\n\t\"./sq\": 1751,\n\t\"./sq.js\": 1751,\n\t\"./sr\": 9016,\n\t\"./sr-cyrl\": 1368,\n\t\"./sr-cyrl.js\": 1368,\n\t\"./sr.js\": 9016,\n\t\"./ss\": 1943,\n\t\"./ss.js\": 1943,\n\t\"./sv\": 5095,\n\t\"./sv.js\": 5095,\n\t\"./sw\": 6014,\n\t\"./sw.js\": 6014,\n\t\"./ta\": 1571,\n\t\"./ta.js\": 1571,\n\t\"./te\": 4819,\n\t\"./te.js\": 4819,\n\t\"./tet\": 8646,\n\t\"./tet.js\": 8646,\n\t\"./tg\": 8641,\n\t\"./tg.js\": 8641,\n\t\"./th\": 5714,\n\t\"./th.js\": 5714,\n\t\"./tk\": 7082,\n\t\"./tk.js\": 7082,\n\t\"./tl-ph\": 9830,\n\t\"./tl-ph.js\": 9830,\n\t\"./tlh\": 8757,\n\t\"./tlh.js\": 8757,\n\t\"./tr\": 3571,\n\t\"./tr.js\": 3571,\n\t\"./tzl\": 6785,\n\t\"./tzl.js\": 6785,\n\t\"./tzm\": 4924,\n\t\"./tzm-latn\": 9126,\n\t\"./tzm-latn.js\": 9126,\n\t\"./tzm.js\": 4924,\n\t\"./ug-cn\": 2134,\n\t\"./ug-cn.js\": 2134,\n\t\"./uk\": 3350,\n\t\"./uk.js\": 3350,\n\t\"./ur\": 3397,\n\t\"./ur.js\": 3397,\n\t\"./uz\": 8556,\n\t\"./uz-latn\": 3562,\n\t\"./uz-latn.js\": 3562,\n\t\"./uz.js\": 8556,\n\t\"./vi\": 7751,\n\t\"./vi.js\": 7751,\n\t\"./x-pseudo\": 1505,\n\t\"./x-pseudo.js\": 1505,\n\t\"./yo\": 5943,\n\t\"./yo.js\": 5943,\n\t\"./zh-cn\": 4186,\n\t\"./zh-cn.js\": 4186,\n\t\"./zh-hk\": 2243,\n\t\"./zh-hk.js\": 2243,\n\t\"./zh-mo\": 5437,\n\t\"./zh-mo.js\": 5437,\n\t\"./zh-tw\": 3843,\n\t\"./zh-tw.js\": 3843\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksensor_thing_api_map\"] = self[\"webpackChunksensor_thing_api_map\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(5987); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","attrs","staticRenderFns","script","component","_setupProxy","staticClass","model","value","baseurl","callback","$$v","expression","on","$event","connect","_v","zoom","center","url","attribution","_l","points","point","key","res","location","coordinates","markerWasClicked","class","selected","data","treeData","BASE_PATH","replace","BaseAPI","constructor","configuration","basePath","axios","globalAxios","RequiredError","Error","field","msg","super","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setFlattenedQueryParams","urlSearchParams","parameter","Array","isArray","forEach","item","Object","keys","currentKey","has","append","set","setSearchParams","objects","searchParams","URLSearchParams","search","toString","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","DatastreamsApiAxiosParamCreator","v11DatastreamsEntityIdGet","async","entityId","$select","$expand","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","headers","v11DatastreamsEntityIdObservationsGet","$skip","$top","$count","$filter","v11DatastreamsEntityIdObservedPropertyDatastreamsGet","v11DatastreamsEntityIdObservedPropertyGet","v11DatastreamsEntityIdSensorDatastreamsGet","v11DatastreamsEntityIdSensorGet","v11DatastreamsEntityIdThingDatastreamsGet","v11DatastreamsEntityIdThingGet","v11DatastreamsEntityIdThingLocationsGet","v11DatastreamsGet","DatastreamsApiFp","localVarAxiosParamCreator","localVarAxiosArgs","DatastreamsApi","then","LocationsApiAxiosParamCreator","v11LocationsEntityIdGet","v11LocationsEntityIdThingsGet","v11LocationsGet","LocationsApiFp","LocationsApi","ObservationsApiAxiosParamCreator","v11ObservationsEntityIdDatastreamGet","v11ObservationsEntityIdDatastreamObservationsGet","v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet","v11ObservationsEntityIdDatastreamObservedPropertyGet","v11ObservationsEntityIdDatastreamSensorDatastreamsGet","v11ObservationsEntityIdDatastreamSensorGet","v11ObservationsEntityIdDatastreamThingDatastreamsGet","v11ObservationsEntityIdDatastreamThingGet","v11ObservationsEntityIdDatastreamThingLocationsGet","v11ObservationsEntityIdFeatureOfInterestGet","v11ObservationsEntityIdFeatureOfInterestObservationsGet","v11ObservationsEntityIdGet","v11ObservationsGet","ObservationsApiFp","ObservationsApi","ThingsApiAxiosParamCreator","v11ThingsEntityIdDatastreamsGet","v11ThingsEntityIdGet","v11ThingsEntityIdLocationsGet","v11ThingsGet","ThingsApiFp","ThingsApi","Configuration","param","apiKey","username","password","accessToken","formDataCtor","isJsonMime","mime","jsonMime","RegExp","test","toLowerCase","type","_e","loading","activeTab","_s","$i18n","t","description","encodingType","join","properties","ThingC","Vue","__decorate","Prop","Component","LocationC","components","ThingsC","noprops","staticStyle","chartdata","chartOptions","config","baseUrl","setBaseUrl","getBaseUrl","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","TimeScale","ObservationsC","maxBarThickness","barThickness","plugins","legend","display","responsive","maintainAspectRatio","scales","time","displayFormats","dataChanged","newD","loadData","mounted","observations","id","console","log","e","labels","map","moment","resultTime","datasets","label","title","backgroundColor","result","default","Watch","Bar","DatastreamsC","ret","atr","entries","Observations","PropertiesC","data_changed","new_data","Datastreams","Location","Thing","Map","arr","load","$router","push","params_chanded","params","immediate","LMap","LTileLayer","LMarker","LIcon","treeTypes","openAll","contextItems","contextSelected","TreeC","max_children","max_depth","valid_children","icon","$route","Math","random","text","count","children","id_changed","node","selectedNode","$emit","getThingsTree","child","addNode","_data","datastreams","getDatascreamsTree","datastreamsNode","things","thing","datastream","observation","getTypeRule","typeRule","filter","command","editName","VTreeview","_m","deselect","ref","spiderfyDistanceMultiplier","animate","animateAddingMarkers","nativeOn","ev","stopImmediatePropagation","apply","arguments","datastreamsbyID","unitOfMeasurement","select","selectedData","leaf","active","length","$t","groupByCategory","StreamTreeC","selectedNodesKeys","emit","concat","groups","isactive","val","unit","Datapoint","handler","$sstore","obs","state","DatastreamsV","$refs","streamTree","lat","lng","proms","Promise","rej","split","thingsLoaction","all","setPoints","getDataForPoints","settimer","clearTimer","beforeDestroy","StreamTree","LWMSTileLayer","Vue2LeafletMarkercluster","CustomMarker","VueRouter","routes","path","Tree","router","mode","base","process","VueI18n","i18n","locale","messages","de","TranslationDE","ObsStore","promsSettled","allSettled","obj","timer","setInterval","clearInterval","update","simpleStore","install","prototype","SimpleStore","PerfectScrollbar","VueTreeList","Icon","iconRetinaUrl","require","iconUrl","shadowUrl","Buefy","h","App","$mount","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","n","getter","__esModule","d","a","definition","defineProperty","enumerable","get","g","globalThis","Function","window","prop","hasOwnProperty","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}